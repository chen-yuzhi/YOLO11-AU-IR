# Ultralytics YOLO 🚀, AGPL-3.0 license
# Default training settings and hyperparameters for medium-augmentation COCO training

task: detect # (str) YOLO任务类型，'detect'表示目标检测，其他选项包括 'segment'（分割），'classify'（分类），'pose'（姿态估计），'obb'（目标框）
mode: train # (str) YOLO模式，'train'表示训练，其他模式包括 'val'（验证），'predict'（预测），'export'（导出），'track'（跟踪），'benchmark'（基准测试）

# Train settings -------------------------------------------------------------------------------------------------------
model: # (str, optional) 模型文件路径，支持 PyTorch 模型（如 yolov8n.pt），TorchScript 模型（如 yolov8n.torchscript），ONNX 模型（如 yolov8n.onnx）等
data: # (str, optional) 数据集配置文件路径，通常是一个 YAML 文件，如 coco8.yaml，包含数据集的相关信息（训练集、验证集路径等）
epochs: 100 # (int) 训练的轮次，训练过程中会进行100轮迭代
time: # (float, optional) 训练时间（小时），若指定该参数，则会覆盖 epochs 参数
patience: 100 # (int) 提前停止的耐心轮次，若在指定的轮数内没有明显的性能提升，则停止训练
batch: 16 # (int) 每批次的样本数量，-1表示自动选择适当的批量大小
imgsz: 640 # (int | list) 输入图像的尺寸，训练和验证时使用相同的尺寸，或指定图像宽高（训练时仅支持正方形图像）
save: True # (bool) 是否保存训练检查点和预测结果
save_period: -1 # (int) 每隔多少个 epoch 保存一次检查点，若小于1则禁用保存
cache: False # (bool) 是否缓存数据加载，'True'表示缓存到内存，'False'表示不缓存
device: # (int | str | list, optional) 训练使用的设备，支持 'cuda:0', 'cuda:0,1' 或 'cpu'
workers: 8 # (int) 数据加载时使用的线程数，每个进程的工作线程数量（分布式训练时每个 RANK 使用的线程数）
project: # (str, optional) 项目名称，训练结果保存路径为 'project/name'
name: # (str, optional) 实验名称，训练结果保存路径为 'project/name'
exist_ok: False # (bool) 是否覆盖已有的实验目录，若为 True，则允许覆盖已有目录
pretrained: True # (bool | str) 是否使用预训练模型，True 表示使用默认的预训练权重，或指定路径加载自定义预训练模型
optimizer: auto # (str) 优化器类型，支持 'SGD', 'Adam', 'Adamax', 'AdamW', 'NAdam', 'RAdam', 'RMSProp' 或 'auto'（自动选择）
verbose: True # (bool) 是否输出详细的训练过程信息
seed: 0 # (int) 随机种子，用于确保实验结果可复现
deterministic: True # (bool) 是否启用确定性训练模式，确保每次训练结果相同
single_cls: False # (bool) 是否将多类别数据作为单类别训练
rect: False # (bool) 是否使用矩形训练模式（只在训练模式下有效），训练时选择图像尺寸时填充空白区域
cos_lr: False # (bool) 是否使用余弦学习率调度
close_mosaic: 10 # (int) 在训练的最后几个 epoch 禁用 mosaic 数据增强（0 表示从一开始就禁用）
resume: False # (bool) 是否从上次训练检查点恢复训练
amp: True # (bool) 是否启用自动混合精度（AMP）训练，可以提高训练速度并降低显存使用
fraction: 1.0 # (float) 训练数据的比例，默认为 1.0，表示使用所有训练样本
profile: False # (bool) 是否在训练过程中对 ONNX 和 TensorRT 推理速度进行性能分析
freeze: None # (int | list, optional) 是否冻结前 n 层，或指定冻结的层索引列表
multi_scale: False # (bool) 是否在训练过程中使用多尺度图像

# Segmentation
overlap_mask: True # (bool) 在训练时合并目标掩码为一个单一的图像掩码，适用于分割任务
mask_ratio: 4 # (int) 分割任务的掩码下采样比例

# Classification
dropout: 0.0 # (float) 是否使用 dropout 正则化，适用于分类任务


# Val/Test settings ----------------------------------------------------------------------------------------------------
val: True # (bool) 是否在训练过程中进行验证
split: val # (str) 数据集分割名称，'val' 表示使用验证集，'test' 表示使用测试集，'train' 表示使用训练集
save_json: False # (bool) 是否将结果保存为 JSON 格式
save_hybrid: False # (bool) 是否保存混合版本的标签（包括标签和额外的预测）
conf: # (float, optional) 物体置信度阈值，仅检测任务中有效（默认值为0.25，预测时使用0.25，验证时为0.001）
iou: 0.7 # (float) NMS（非最大抑制）算法的 IoU 阈值，用于去除重复检测框
max_det: 300 # (int) 每张图像最多返回的检测框数
half: False # (bool) 是否使用半精度（FP16）推理
dnn: False # (bool) 是否使用 OpenCV DNN 模块进行 ONNX 推理
plots: True # (bool) 是否在训练和验证过程中保存图像和结果的可视化


# Predict settings -----------------------------------------------------------------------------------------------------
source: # (str, optional) 输入图像或视频的源目录
vid_stride: 1 # (int) 视频帧率步幅，用于跳帧处理
stream_buffer: False # (bool) 是否缓冲所有流媒体帧（True），还是仅返回最近的帧（False）
visualize: False # (bool) 是否可视化模型的特征
augment: False # (bool) 是否对预测图像进行数据增强
agnostic_nms: False # (bool) 是否进行类别无关的 NMS（非最大抑制）
classes: # (int | list[int], optional) 仅筛选特定类别的预测结果
retina_masks: False # (bool) 是否使用高分辨率分割掩码
embed: # (list[int], optional) 返回指定层的特征向量或嵌入向量


# Visualize settings ---------------------------------------------------------------------------------------------------
show: False # (bool) 是否显示预测图像和视频（如果环境允许）
save_frames: False # (bool) 是否保存预测的每一帧图像
save_txt: False # (bool) 是否将预测结果保存为 .txt 文件
save_conf: False # (bool) 是否保存带有置信度分数的预测结果
save_crop: False # (bool) 是否保存裁剪后的预测图像
show_labels: True # (bool) 是否显示预测标签（例如 'person'）
show_conf: True # (bool) 是否显示预测置信度（例如 '0.99'）
show_boxes: True # (bool) 是否显示预测框
line_width: # (int, optional) 边框的线宽，如果为 None 则根据图像尺寸自动调整


# Export settings ------------------------------------------------------------------------------------------------------
format: torchscript # (str) 导出的模型格式，支持 TorchScript, ONNX, TensorRT 等格式
keras: False # (bool) 是否将模型导出为 Keras 格式
optimize: False # (bool) 是否对 TorchScript 模型进行优化以适配移动设备
int8: False # (bool) CoreML/TF INT8 量化
dynamic: False # (bool) ONNX/TF/TensorRT: 是否使用动态轴
simplify: True # (bool) ONNX: 使用 `onnxslim` 简化模型
opset: # (int, optional) ONNX: opset 版本
workspace: 4 # (int) TensorRT: 工作区大小（单位：GB）
nms: False # (bool) CoreML: 是否在导出时加入 NMS（非最大抑制）


# Hyperparameters ------------------------------------------------------------------------------------------------------
lr0: 0.01 # (float) 初始学习率（例如 SGD=1E-2，Adam=1E-3）
lrf: 0.01 # (float) 最终学习率（lr0 * lrf）
momentum: 0.937 # (float) SGD 动量/Adam beta1
weight_decay: 0.0005 # (float) 优化器的权重衰减系数（5e-4）
warmup_epochs: 3.0 # (float) 预热轮次（支持小数）
warmup_momentum: 0.8 # (float) 预热初始动量
warmup_bias_lr: 0.1 # (float) 预热初始偏置学习率
box: 7.5 # (float) 边框损失增益
cls: 0.5 # (float) 类别损失增益
dfl: 1.5 # (float) DFL 损失增益
pose: 12.0 # (float) 姿态损失增益
kobj: 1.0 # (float) 关键点目标损失增益
label_smoothing: 0.0 # (float) 标签平滑（比例）
nbs: 64 # (int) 名义批量大小
hsv_h: 0.015 # (float) 图像 HSV-Hue 增强（比例）
hsv_s: 0.7 # (float) 图像 HSV-Saturation 增强（比例）
hsv_v: 0.4 # (float) 图像 HSV-Value 增强（比例）
degrees: 0.0 # (float) 图像旋转角度（+/- 度）
translate: 0.1 # (float) 图像平移（+/- 比例）
scale: 0.5 # (float) 图像缩放（+/- 增益）
shear: 0.0 # (float) 图像剪切（+/- 度）
perspective: 0.0 # (float) 图像透视变换（+/- 比例）
flipud: 0.0 # (float) 图像上下翻转（概率）
fliplr: 0.5 # (float) 图像左右翻转（概率）
bgr: 0.0 # (float) 图像通道 BGR（概率）
mosaic: 1.0 # (float) 图像 Mosaic 数据增强（概率）
mixup: 0.0 # (float) 图像 MixUp 数据增强（概率）
copy_paste: 0.0 # (float) 图像 Copy-Paste 数据增强（概率）
copy_paste_mode: "flip" # (str) Copy-Paste 数据增强的方式（'flip', 'mixup'）
auto_augment: randaugment # (str) 自动增强策略（'randaugment', 'autoaugment', 'augmix'）
erasing: 0.4 # (float) 分类训练中的随机擦除概率（0-0.9），0 表示不使用
crop_fraction: 1.0 # (float) 分类任务的图像裁剪比例（0.1-1），1.0 表示不裁剪


# Custom config.yaml ---------------------------------------------------------------------------------------------------
cfg: # (str, optional) 用于覆盖默认配置文件（defaults.yaml）


# Tracker settings ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml # (str) 跟踪器类型，支持 ['botsort.yaml', 'bytetrack.yaml'] 等
